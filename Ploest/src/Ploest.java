import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;

import DataFitter.DattaFiter;
public class Ploest {
	static String projectName="PloestProject";
	static String inputFile ="C://Users//Mel//Documents//BIOINFORMATICS//DELFT_Research//Data//SimulatedReads//sim200bp.sam";
	static String outputFile ="C://Users//Mel//Documents//BIOINFORMATICS//DELFT_Research//Data//SimulatedReads//PloEst";
	
	static int windowLength=1000;
	static File currentFolder;
	public static void main(String[] args) {
		//FitGaussian fg=new FitGaussian("C:\\Users\\Mel\\Documents\\BIOINFORMATICS\\DELFT_Research\\Data\\SimulatedReads\\PloEst\\PloEst200\\points.txt");
		//return;
		//*
		if (args.length > 0) {
			//-help
			if ((args[0]).equals("-h") || (args[0]).equals("-help") || (args[0]).equals("help") || (args[0]).equals("help")){
					printHelp();
			}else {		
				
				projectName=args[0];
				inputFile = (args[1]);	
				outputFile = args[2];
				currentFolder =	 new File(outputFile + "//" + projectName);
				currentFolder.mkdirs();
				if ((args.length>2) && (args[2]).equals("-w"))windowLength=Integer.parseInt(args[3]);
				
				try {
					SamParser bp=new SamParser(inputFile,outputFile);
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					System.out.println("FileNotFoundException");
					e.printStackTrace();
				} catch (UnsupportedEncodingException e) {
					// TODO Auto-generated catch block
					System.out.println("UnsupportedEncodingException");
					e.printStackTrace();
				}
			}
		}
	}
	
	
	public static void printHelp() {
		System.out.println("\n +++++++++++++++++++++++++++++++++++++++++++++++++++++++");
		System.out.println("\nPloEst -help:");
		System.out.println(
				"\nUSAGE:    java –jar Ploest.jar  <projectname> < inputFile>  <outputFolder> -w  <windowlength>  -k (either <K-length> or -e)  -r <kfrom>  <kstep>");
		System.out.println("\n(projectname)         – (String)  Prefix used to generate the results file.");
		System.out.println(
				"(inputfile)          - (String)   Pathway (absolute if necessary) to the input file containing the original sequence or contig list.");
		System.out.println("                                  Must be in fasta or .txt file");
		System.out.println(
				"(outputFolder)       - (String)   Pathway (absolute if necessary) to the autogenerated output folder that will contain the results('./' if the folder points to the current directory)");
		System.out.println(
				"-m (minRepeat)       - (int)      Minimal amount of times the k-mer needs to be repeated to be taken into account.");
		System.out.println("-k (k length)        - (int)      K-mer length. In Multirun mode (-r) findMultiKmers will run increasing k each time from <kfrom> until this <K-length> value.");
		System.out.println("-e (run until end)   - (optional) Instead of <K-length>, 'run until end' mode (-e) can be selected.");
		System.out.println("                                  In (-e) mode the program will be run increasing k each time from <kfrom> until no appearence of the final length is found.");
		System.out.println(
				"-r (Multirun mode)   - (int,int)  When selected, the first parameter <kfrom> will be used as the starting k length for the first run.");
		System.out.println(
				"                                  The second value <kstep> indicates the increase of k at each run until reaching the largest final k passed in the parameter -k");

		System.out.println(
				"\nExample 1: Run findMultiKmers 1 time (single run) on Ecoli.fasta to find all 10-mers repeated at least 15 times:");
		System.out.println(
				"java  -jar  findMultiKmers.jar ecoliSingleKmers C:\\<Pathway to input file>\\Ecoli.fasta  C:\\<Pathway to output folder> -m 15 -k 10  ");

		System.out.println(
				"\nExample 2: For kfrom=10 to kto=200,with kstep=2; run findMultiKmers 96 times (10:200:2) on Ecoli.fasta to find all k-mers repeated at least 2 times:");
		System.out.println(
				"java  -jar  findMultiKmers.jar ecoliMKmersRange C:\\<Pathway to input file>\\Ecoli.fasta  C:\\<Pathway to output folder> -m 2 -k 200 -r 10 2 ");
		System.out.println(
				"\nExample 3: run findMultiKmers from kfrom=8 until no k-mer is found, increasing k by kstep=5 on Ecoli.fasta to find all k-mers repeated at least 3 times:");
		System.out.println(
				"java  -jar  findMultiKmers.jar ecoliMKmersRunUntilEnd C:\\<Pathway to input file>\\Ecoli.fasta  C:\\<Pathway to output folder> -m 3 -k -e -r 8 5 ");

		System.exit(1);
		
		//*/
	}

}
